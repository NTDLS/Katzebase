<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
  
<#
	string connectionString = @"Server=.;integrated security=True;";
	string databaseName = "AdventureWorks2012";
	string relativeOutputFilePath = null;
	string strNamespace = "Katzebase.TestHarness.ADORepository";
	string strModelsNamespace = "Models";
	string adoConnectionString = "\"Server=.;Database=" + databaseName + ";Trusted_Connection=True;\"";

	List<string> includeTables = new List<string>{ };
	
	SqlConnection oneSqlConnection = new SqlConnection(connectionString);
	ServerConnection oneServerConnection = new ServerConnection(oneSqlConnection);
	Server oneServer = new Server(oneServerConnection);
	Database oneDatabase = oneServer.Databases[databaseName];
	foreach (Table oneTable in oneDatabase.Tables)
	{
		if (!oneTable.Name.Equals("sysdiagrams") && oneTable.Schema != "cdc" && (includeTables.Count == 0 || includeTables.Contains(oneTable.Name)))
		{
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using Katzebase.Library.Client;
using Katzebase.Library.Payloads;

namespace <#= strNamespace #>
{
	public partial class <#= oneTable.Schema #>_<#= oneTable.Name #>Repository
	{        
		public void Export_<#= oneTable.Schema #>_<#= oneTable.Name #>()
		{
            KatzebaseClient client = new KatzebaseClient("http://localhost:6858/");

            if(client.Schema.Exists("<#= databaseName #>:<#= oneTable.Schema #>:<#= oneTable.Name #>"))
			{
				return;
			}

            client.Transaction.Begin();

            client.Schema.Create("<#= databaseName #>:<#= oneTable.Schema #>:<#= oneTable.Name #>");

			using (SqlConnection connection = new SqlConnection(<#= adoConnectionString #>))
			{
				connection.Open();

				try
				{
					using (SqlCommand command = new SqlCommand("SELECT * FROM <#= oneTable.Schema #>.<#= oneTable.Name #>", connection))
					{
						command.CommandTimeout = 10000;
						command.CommandType = System.Data.CommandType.Text;

						using (SqlDataReader dataReader = command.ExecuteReader(System.Data.CommandBehavior.CloseConnection))
						{
                            <#
                            Dictionary<string, string> columnIndexes = new Dictionary<string, string>();

                            string variableName = string.Empty;
							foreach (Column oneColumn in oneTable.Columns)
							{
                                variableName = "indexOf" + TemplateHelper.FriendlyVariable(oneColumn.Name);

                                columnIndexes.Add(oneColumn.Name, variableName);
                            #>
int <#=variableName#> = dataReader.GetOrdinal("<#=oneColumn.Name#>");
						    <#
							}
						    #>

							int rowCount = 0;


							while (dataReader.Read() /*&& rowCount++ < 10000*/)
							{
								if(rowCount > 0 && (rowCount % 100) == 0)
								{
									Console.WriteLine("<#= databaseName #>:<#= oneTable.Schema #>:<#= oneTable.Name #>: {0}", rowCount);
								}

								if(rowCount > 0 && (rowCount % 1000) == 0)
								{
									Console.WriteLine("Comitting...");
									client.Transaction.Commit();
									client.Transaction.Begin();
								}

								try
								{
									client.Document.Store("<#= databaseName #>:<#= oneTable.Schema #>:<#= oneTable.Name #>", new Document(new <#= strModelsNamespace #>.<#= oneTable.Schema #>_<#= oneTable.Name #>
									{
	<#										
										foreach (Column oneColumn in oneTable.Columns)
										{
	#>
										<#=TemplateHelper.FriendlyVariable(oneColumn.Name) + "= dataReader." + TemplateHelper.GetDataReaderMethod(oneDatabase, oneColumn.DataType, oneColumn.Nullable) + "(" + columnIndexes[oneColumn.Name] + ")," #>
	<#
										}		
	#>
									}));
								}
								catch(Exception ex)
								{
									Console.WriteLine(ex.Message);
								}
								
								rowCount++;
							}
						}
					}
					connection.Close();
				}
				catch
				{
					//TODO: add error handling/logging
					throw;
				}

				client.Transaction.Commit();
            }
		}
	}
}

<#
			relativeOutputFilePath = @"\ADODALClasses\" + oneTable.Schema + "_" + oneTable.Name + "Repository.cs";
			TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
			GenerationEnvironment = new System.Text.StringBuilder();
		}
	}	
#>
	
<#+
	public class TemplateHelper
{
	public static void WriteTemplateOutputToFile(
		string relativeOutputFilePath,
		Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host,
		System.Text.StringBuilder GenerationEnvironment)
	{
		string outputPath = System.IO.Path.GetDirectoryName(Host.TemplateFile);
		string outputFilePath = outputPath + relativeOutputFilePath;
		System.IO.File.WriteAllText(outputFilePath, GenerationEnvironment.ToString().TrimStart());
	}
	
	public static string SplitCamelCase(string str)
	{
		return Regex.Replace( Regex.Replace( str, @"(\P{Ll})(\P{Ll}\p{Ll})", "$1 $2" ), @"(\p{Ll})(\P{Ll})", "$1 $2" );
	}
	
	public static string GetDataReaderMethod(Microsoft.SqlServer.Management.Smo.Database database, Microsoft.SqlServer.Management.Smo.DataType dataType, bool Nullable)
	{
		string methodName = string.Empty;
		string nullableString = Nullable == true ? "Nullable" : string.Empty;
		
		string typeName = string.Empty;
		string inputType = dataType.ToString().Trim();

		if(dataType.SqlDataType.ToString().ToLower() == "xml")
		{
			inputType = "xml";
		}
		else if(inputType == String.Empty)
		{
			inputType = dataType.SqlDataType.ToString();
		}

        if (dataType.SqlDataType == SqlDataType.UserDefinedDataType)
        {
            UserDefinedDataType userType = database.UserDefinedDataTypes[dataType.Name];
            inputType = ((SqlDataType)Enum.Parse(typeof(SqlDataType), userType.SystemType, true)).ToString();
        }
				
		switch(inputType.ToLower())
		{
			case "datetime":
			case "smalldatetime":
			case "date":
			case "datetime2":
				methodName = "Get" + nullableString + "DateTime";
				break;
			case "time":
				methodName = "Get" + nullableString + "TimeSpan";
				break;
			case "tinyint":
				methodName = "Get" + nullableString + "Byte";
				break;
			case "int":
				methodName = "Get" + nullableString + "Int32";
				break;
			case "smallint":
				methodName = "Get" + nullableString + "Int16";
				break;
			case "bigint":			
				methodName = "Get" + nullableString + "Int64";
				break;
			case "numeric":
			case "decimal":
			case "money":
			case "smallmoney":
				methodName = "Get" + nullableString + "Decimal";
				break;
			case "bit":
				methodName = "Get" + nullableString + "Boolean";
				break;
			case "uniqueidentifier":
				methodName = "Get" + nullableString + "Guid";
				break;
			case "varbinary":
			case "timestamp":
			case "image":
			case "binary":
				methodName = "Get" + nullableString + "ByteArray";
				break;
			case "geography": //C:\Program Files\Microsoft SQL Server\120\Shared\Microsoft.SqlServer.Types.dll
				methodName = "Get" + nullableString + "SqlGeography";
				break;
			case "ntext":
			case "text":
			case "char":
			case "nchar":
			case "varchar":
			case "nvarchar":
			case "sysname":
			case "xml":
				methodName = "Get" + nullableString + "String";
				break;
			case "hierarchyid":
				methodName = "Get" + nullableString + "HierarchyId";
				break;
			case "real":
				methodName = "Get" + nullableString + "Single";
				break;
			case "float":
				methodName = "Get" + nullableString + "Float";
				break;
			default:
				methodName = "Get" + nullableString + typeName;
				break;
		}
		
		if(Nullable && typeName != "string" && typeName != "byte[]")
		{
			typeName += "?";	
		}
				
		return methodName;
	}

	
	public static string GetLowerCasedName(string fieldName)
	{
		return Char.ToLowerInvariant(fieldName[0]) + fieldName.Substring(1);
	}

	public static string FriendlyVariable(string fieldName)
	{
		bool match = false;
		char dirtyChar;
		char[] validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789".ToCharArray();
		string newFieldName = string.Empty;

		foreach (char fieldChar in fieldName)
		{
			dirtyChar = char.ToUpper(fieldChar);
			match = false;

			foreach(char validChar in validChars)
			{
				if (dirtyChar == validChar)
				{
					match = true;
					break;
				}
			}

			if (match)
			{
				newFieldName += fieldChar;
			}
			else
			{
				newFieldName += '_';
			}
				
		}

		/*
		int length;
		do
		{
			length = newFieldName.Length;
			newFieldName = newFieldName.Replace("__", "_");
		} while (length != newFieldName.Length);

		if (newFieldName.LastIndexOf('_') == newFieldName.Length - 1)
		{
			newFieldName = newFieldName.Substring(0, newFieldName.Length - 1);
		}
		*/

		return newFieldName;
	}

	public static string GetDataMemberCode(int currentFieldCount)
	{
		char[] alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".ToCharArray(); 	
		
		int charIndex = currentFieldCount;
		int multiplier = 1;
		
		if(currentFieldCount != 0)
		{
			multiplier = (currentFieldCount / 26) + 1;		
		}
		
		if(currentFieldCount > 25)
		{
			charIndex = currentFieldCount % 26;	
		}
		
		System.Text.StringBuilder sb = new System.Text.StringBuilder();
		for(int i = 0; i < multiplier; i++)
		{			
			
			sb.Append(alpha[charIndex]);
		}
		
		return sb.ToString();
	}
}
#>
