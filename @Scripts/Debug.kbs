 
--region TestCode

--region TestCode

--select 11 + 11 from single

create index ix_ddd
(
	Field
) on jhkdd

 
SELECt
	sw.Id as SourceWordId,
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	tw.Id as TargetWordId,	
	tw.Text as TargetWord,
 	tl.Name as TargetLanguage
FROM
	WordList:Word as sw
INNER JOIN WordList:Language as sl
	ON sl.Id = sw.LanguageId
INNER JOIN WordList:Synonym as S
	ON S.SourceWordId = sw.Id
INNER JOIN WordList:Word as tw
	ON tw.Id = S.TargetWordId
INNER JOIN WordList:Language as tl
	ON tl.Id = TL.LanguageId
WHERE
	sw.Text = 'gym'
 

SELECT
	Sha1('t'),
    11 ^ (2 + 1) + 'ten' + (Length('A10CharStr') * 10 + 2),
    6 * -1 as Negative,
    10 + 10 + (11 ^ 3) + 10 + '->' + Guid(),
    10 + 10 + 'ten' + 10 * 10,
    'ten (' + 10 * 10 + ') : ' + DateTimeUTC('yyyy/MM/dd hh:mm:ss tt')
FROM
	Single
where
	1 = 1
	and 1 = 3
	and (
		10 = 10
		and 5 = 5
			and (
		10 = 10
		and 5 = 5
	)
	)
order by
	10
	
select 11 + 11 from single
 
 
--endregion
/* 
SELECT
	U.Id,
	U.DisplayName,
	P.CreationDate,
	P.Body,
	P.Score
FROM
	StackOverflow:Users as U
INNER JOIN StackOverflow:Posts as P
	ON P.OwnerUserId = U.Id
WHERE
	U.DisplayName = 'NTDLS'
*/

--endregion

--select
--*
--into :
--from master:account

--select col1, IsInteger(col1), IsString(col1), IsDouble(col1) from testsch

/*
update
	Test
set
	FirstName = 'Jane',
	MiddleName = Guid(),
	LastName = 'Doe'
where
	Id = 10

select * from Test
*/

/*
insert into Test(FirstName, LastName)
values('Jane', 'Doe'),('John', 'Doe'),('Test', Guid())
select * from Test
delete from Test
*/

/*
insert into Test (FirstName = 'Jane', Proc = Guid(), LastName = 'Doe')
select * from Test
delete from Test
*/

/*set TraceWaitTimes false
GO

SELECT
	U.Id,
	U.DisplayName,
	P.CreationDate,
	P.Body,
	P.Score
FROM
	StackOverflow:Users as U
INNER JOIN StackOverflow:Posts as P
	ON P.OwnerUserId = U.Id
WHERE
	U.DisplayName = 'NTDLS'
*/

--exec showprocesses
--create schema StackOverflow2010:Votes with (pagesize = 10000)

/*
CREATE INDEX IX_Posts_OwnerUserId(
    OwnerUserId
) ON StackOverflow:Posts WITH (PARTITIONS=1000)
*/

--exec showprocesses

--kill 11
--rebuild uniquekey ix_SourceWordId on Test with (partitions = 100)
--rebuild index ix_SourceWordId on Test with (partitions = 100)

--LIST schemas WordList
--LIST documents test size 100

--analyze schema WordList:Synonym --with (includephysicalpages = true)

--ALTER CONFIGURATION WITH (DeferredIOEnabled = true, CacheMaxMemory = 1024)

--ALTER schema Test with (pagesize = 100)

/*
CREATE UNIQUEKEY ix_SourceWordId(
    id
) ON Test WITH (PARTITIONS=100)

DROP INDEX ix_SourceWordId ON Test
*/

/*
SELECT
	sw.Id as SourceWordId,
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	tw.Id as TargetWordId,	
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
INTO
	#Temporary:Test
FROM
	WordList:Word as sw
INNER JOIN WordList:Language as sl
	ON sl.Id = sw.LanguageId
INNER JOIN WordList:Synonym as S
	ON S.SourceWordId = sw.Id
INNER JOIN WordList:Word as tw
	ON tw.Id = S.TargetWordId
INNER JOIN WordList:Language as tl
	ON tl.Id = TW.LanguageId
WHERE
	sw.Text = 'gym'
*/	
/*
UPDATE
	Test
SET
	SourceLanguage = Length(TargetWord) + 'Test',
	Blah = 'Another Test' + Length(TargetWord)
WHERE
	TargetLanguage = 'Spanish'
*/

--select * from Test

/*
CREATE INDEX IX_Language (
	Name,
	Id
) ON WordList:Language
*/

/*
DELETE
FROM
	WordList:Word as sw
INNER JOIN WordList:Language as sl
	ON sl.Id = sw.LanguageId
INNER JOIN WordList:Synonym as S
	ON S.SourceWordId = sw.Id
INNER JOIN WordList:Word as tw
	ON tw.Id = S.TargetWordId
INNER JOIN WordList:Language as tl
	ON tl.Id = TW.LanguageId
WHERE
	sw.Text = 'job'
    and tl.Name = 'English'
*/


--select Text from WordList:Word as sw where sw.Text = 'Gym' 
--select Text from WordList:Word where Text = 'Gym' 


/*
delete from Test where TargetLanguage = 'English'

DELETE FROM
	WordList:Word as sw
INNER JOIN WordList:Language as sl
	ON sl.Id = sw.LanguageId
INNER JOIN WordList:Synonym as S
	ON S.SourceWordId = sw.Id
INNER JOIN WordList:Word as tw
	ON tw.Id = S.TargetWordId
INNER JOIN WordList:Language as tl
	ON tl.Id = TW.LanguageId
WHERE
    tl.Name = 'English'

*/	

--select * from WordList:Language


/*
insert into Test (SourceWordId,SourceWord,SourceLanguage,TargetWordId,TargetWord,TargetLanguage)
SELECT
	sw.Id as SourceWordId,
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	tw.Id as TargetWordId,	
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
FROM
	WordList:Word as sw
INNER JOIN WordList:Language as sl
	ON sl.Id = sw.LanguageId
INNER JOIN WordList:Synonym as S
	ON S.SourceWordId = sw.Id
INNER JOIN WordList:Word as tw
	ON tw.Id = S.TargetWordId
INNER JOIN WordList:Language as tl
	ON tl.Id = TW.LanguageId
WHERE
	sw.Text = 'gym'
	
Create schema Test
*/
--delete from Test where TargetLanguage = 'Spanish'

--insert into Temporary (FirstName,  LastName)
--Values ('Josh', 'Patterson'), ('Bridget', 'Patterson'), ('Pat', 'Lester')

/*
insert into Temporary (FirstName,  LastName)
Values ('Josh', 'Patterson'), ('Bridget', 'Patterson'), ('Pat', 'Lester')
*/

/*
SELECT
	sw.Id as SourceWordId,
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	tw.Id as TargetWordId,	
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
FROM
	WordList:Word as sw
INNER JOIN WordList:Language as sl
	ON sl.Id = sw.LanguageId
INNER JOIN WordList:Synonym as S
	ON S.SourceWordId = sw.Id
INNER JOIN WordList:Word as tw
	ON tw.Id = S.TargetWordId
INNER JOIN WordList:Language as tl
	ON tl.Id = TW.LanguageId
WHERE

	sl.Name = 'English'
	AND (
		sw.Text LIKE 'as%'
		AND sw.Text LIKE '%er'
		OR (
			sw.Text LIKE 'Sp%'
			and sw.Text LIKE '%sh'
		)
	)
	OR (
		sw.Text LIKE 'au%'
		AND sw.Text LIKE '%le'
	)
	and Length(sw.Text) < 10
*/
/*
select 
	sw.Id,
	sw.Text,
	Length(sw.Text) + 'Some value' as Test,
	sw.LanguageId,
	sl.Name
from
	WordList::Word as sw --(15 rows affected)
inner join WordList:Language as sl
	on sl.Id = sw.LanguageId
where
--(
	sw.Text LIKE 'As%'
	and sw.LanguageId = 3
	and Length(sw.Text) / 1000 < sw.Id
	and sw.Text = sw.Text
	and sw.Text != sw.Text + 'More Text'
	and sw.Text LIKE '%to'
	and sw.Text like '%in%'
	and sl.Name = 'Spanish'
	--and sw.LanguageId between 3 and 5
	and (
		sw.LanguageId >= 3
		OR sw.LanguageId <= 5
	)
	and sw.Id > 1000
	)

	OR sw.Text like 'Ca%'
	and sw.Text like '%al'
	and sw.Text like '%na%'
	and sw.LanguageId = 4

	OR sw.Text like 'Ca%'
	and sw.Text like '%al'
	and sw.Text like '%na%'
	and sw.LanguageId = 5
order by
	sw.Text
*/

/*
Create schema WordList
Create schema WordList:Words with (PageSize = 100)
*/

--set TraceWaitTimes true

/*
const @Var1 = 'Test'
const @Var2 = 10
const @Var3 = 16.5

SELECT
	@Var1 as v1,
	@Var2 as v2,
	@Var3 as v3,
	LanguageId,
	Id - 651947 as NumberOf
FROM
	WordList:Word
WHERE
	Text LIKE 'Tab%'
*/

/*
SELECT TOP 10
	LanguageId,
	Text,
	Id
FROM
	WordList:Word
WHERE
	Text LIKE 'Tab%'
ORDER BY
	Text,
	Id
OFFSET
	100
	
/*
SELECT
	LanguageId,
	Text,
	Id
FROM
	WordList:Word
WHERE
	Text LIKE 'Tab%'
*/	

/*
select top 100
	sw.Id as SourceWordId,
	ToProper(sw.Text) as SourceWord,
	sl.Name as SourceLanguage,
	tw.Id as TargetWordId,	
	ToProper(tw.Text) as TargetWord,
	tl.Name as TargetLanguage
from
	WordList:Word as sw
inner join WordList:Language as sl
	on sl.Id = sw.LanguageId
inner join WordList:Synonym as S
	on S.SourceWordId = sw.Id
inner join WordList:Word as tw
	on tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = TW.LanguageId
where
	sw.Text LIKE 'Ta%'
	and sw.Text LIKE '%le'
	and sl.Name = 'English'
	and tl.Name = 'English'
	and sw.Text != tw.Text
order by
	sw.Text,
	tw.Text
*/
--assumption
/*
exec showcachepartitions

exec showcacheallocations

exec showlocks

select top 10
	W.*
from
	WordList:Word as W
inner join WordList:Language as L
	on L.Id = W.LanguageId
where
	W.Text like 'Gym'
*/

/*
select
	sw.Id,
	sw.Text,
	sw.LanguageId
from
	WordList::Word as sw --(15 rows affected)
where
	sw.Text LIKE 'As%'
	and sw.Text LIKE '%to'
	and sw.Text like '%in%'
	--and sw.LanguageId between 3 and 5
	and sw.LanguageId >= 3
	and sw.LanguageId <= 5
	and sw.Id > 1000
	OR sw.Text like 'Ca%'
	and sw.Text like '%al'
	and sw.Text like '%na%'
	and sw.LanguageId = 4
	OR sw.Text like 'Ca%'
	and sw.Text like '%al'
	and sw.Text like '%na%'
	and sw.LanguageId = 5
order by
	sw.Text
*/

	/*
	sw.Text LIKE 'As%'
	and (
		sw.Text LIKE '%to'
		and sw.Text like '%in%'
	)
	and sw.LanguageId = 3
	and sw.Id = 100 --This is to test non-composite index mathcing.
	OR sw.Text like 'Ca%'
	and sw.Text like '%al'
	and sw.Text like '%na%'
	and sw.LanguageId = 4
	OR sw.Text like 'Ca%'
	and sw.Text like '%al'
	and sw.Text like '%na%'
	and sw.LanguageId = 5
	*/
--select * from WordList::FlatTranslate
--where German = 'einbruch' and Dutch = 'inbraak'

/*
	sw.Text = 'Aalto'
	and sw.Text = 'Tulee'
	and sw.Text = 'savi'

select
	*
from
	WordList:Word as W
where
	W.Text like '%George%'
*/
--exec showversion(null)

/*
select top 10
	*
from
	WordList:Word as W
inner join WordList:Language as L
	on L.Id = W.LanguageId
where
	W.Text = 'Gym'
*/
/*
select
	sw.Text
from
	WordList:Word as sw
where
	sw.Text = 'Gym'
	--'Gym' = sw.Text
*/

--set ExplainQuery true
--no indexes: 741,185ms

/*
select
	sw.Id as SourceWordId,
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	tw.Id as TargetWordId,	
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
from
	WordList:Word as sw
inner join WordList:Language as sl
	on sl.Id = sw.LanguageId
inner join WordList:Synonym as S
	on S.SourceWordId = sw.Id
inner join WordList:Word as tw
	on tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = TW.LanguageId
where
	sl.Name = 'English'
	and (
		sw.Text = 'Gym'
		or sw.Text = 'Arm'
	)
*/
