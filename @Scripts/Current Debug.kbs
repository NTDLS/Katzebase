--rebuild index IX_Word_Id on WordList:Word

--exec ClearCache
--exec ReleaseAllocations
--exec ShowCachePartitions

--rebuild index IX_Posts_OwnerUserId on StackOverflow:Posts with (partitions=1000)
--rebuild index IX_Word_Text on WordList:Word
--create schema blah with (pagesize = 10)
--alter schema blah with (pagesize = 400)

/*
insert into blah
(b="ASDFGHJKLQWERTYUIOZXCVBNM"),(b="!@#$%^&*(%^&*@#$%"),(b="1234567890"),(b="098765432"),
(b="jane"),(b="!@#$%^&*(%^&*@#$%"),(b="1234567890"),(b="098765432"),
(b="ASDFGHJKLQWERTYUIOZXCVBNM"),(b="!@#$%^&*(%^&*@#$%"),(b="1234567890"),(b="098765432"),
(b="ASDFGHJKLQWERTYUIOZXCVBNM"),(b="!@#$%^&*(%^&*@#$%"),(b="1234567890"),(b="098765432")
*/

/*
rebuild index IX_Word_LanguageId on WordList:Word
rebuild index IX_Word_Text on WordList:Word

rebuild index IX_Synonym_SourceWordId on WordList:Synonym with (partitions=1000)
rebuild index IX_Synonym_TargetWordId on WordList:Synonym with (partitions=1000)
rebuild index IX_TopNotchERP_Address_ParentKey on TopNotchERP:Address with (partitions=10)
rebuild index IX_FlatTranslate_English on WordList:FlatTranslate with (partitions=100)

select * from WordList:FlatTranslate where English = 'Dog'

CREATE INDEX IX_TopNotchERP_Inventory_OnHandQty
(
	OnHandQty
)on TopNotchERP:Inventory

select * from TopNotchERP:Inventory where OnHandQty between 100 and 110
*/

/*
set TraceWaitTimes true

select
	sw.Text as SourceWord,
	S.TargetWordId,
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
from
	WordList:Word as sw
inner join WordList:Synonym as s
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = tw.LanguageId
where
	sw.Text like 'moon%'
*/
--SELECT top 1000 *
--FROM WordList:Word
--WHERE Id BETWEEN 578500 AND 578800

/*
CREATE INDEX IX_Word_LanguageId
(
	LanguageId
) ON WordList:Word WITH (PARTITIONS = 10)

drop INDEX IX_Word_Text ON WordList:Word WITH (PARTITIONS = 9)
*/
--REBUILD INDEX IX_Word_Text
--ON WordList:Word WITH (PARTITIONS = 100)

--SELECT w.Id, w.Text, w.LanguageId, w.SourceId, w.IsDirty, DocumentUID('w')
--FROM WordList:Word as w WHERE w.Text = 'Fin'
--order by w.Id

/*
CREATE INDEX IX_Synonym_TargetWordId
(
	TargetWordId
) ON WordList:synonym
CREATE INDEX IX_Synonym_SourceWordId
(
	SourceWordId
) ON WordList:synonym
*/

--rebuild index IX_Synonym_TargetWordId on WordList:synonym

/*
set TraceWaitTimes true

insert into TopNotchERP:Address
(
	parent_key = 'ABBEY',
	jtrax_module = 'JMP'
), (
	parent_key = 'ABBEY',
	jtrax_module = 'PMJ'
)

delete from TopNotchERP:Address where parent_key = 'ABBEY'
*/
--analyze INDEX IX_TopNotchERP_Address_ParentKey ON TopNotchERP:Address
/*
insert into TopNotchERP:Address
(
	parent_key = 'ABBEY',
	jtrax_module = 'JMP'
), (
	parent_key = 'ABBEY',
	jtrax_module = 'PMJ'
)


select top 100 * from TopNotchERP:Address where parent_key = 'ABBEY'

delete from TopNotchERP:Address where parent_key = 'ABBEY'
*/


/*
select
	*
from
	StackOverflow:Users as U
inner join Stackoverflow:Posts as P
	ON P.OwnerUserId = U.Id
where
	U.DisplayName = 'NTDLS'
order by
	P.CreationDate
*/


/*
SELECT TOP 5
	P.Name,
	TH.TransactionId,
	P.ProductNumber,
	PSC.Name as Category
FROM
	AdventureWorks:Production:Product as p
INNER JOIN AdventureWorks:Production:TransactionHistory as th
	ON p.ProductID = th.ProductID
    AND p.ListPrice = th.ActualCost
INNER JOIN AdventureWorks:Production:ProductSubcategory as PSC
	ON psc.ProductSubcategoryID = p.ProductSubcategoryID
WHERE
	PSC.Name = 'Road Bikes'
	and TH.TransactionId > 200000
ORDER BY
	P.ProductNumber asc,
	TH.TransactionId desc
	*/
	
--REBUILD INDEX IX_TopNotchERP_Address_ParentKey ON TopNotchERP:Address
--ANALYZE INDEX IX_TopNotchERP_Inventory_OnHandQty ON TopNotchERP:Inventory
--CREATE INDEX IX_TopNotchERP_Inventory_OnHandQty
--(
--	OnHandQty
--) ON TopNotchERP:Inventory

--SELECT OnHandQty FROM TopNotchERP:Inventory WHERE OnHandQty >= 1000 AND OnHandQty <= 3000
--SELECT OnHandQty FROM TopNotchERP:Inventory WHERE OnHandQty between 1000 and 3000
--GO
--SELECT OnHandQty FROM TopNotchERP:Inventory WHERE OnHandQty between 1000 and 3000


/*
rebuild index IX_Product on AdventureWorks:Production:Product
rebuild index IX_Name on AdventureWorks:Production:Product
rebuild index IX_FlatTranslate_English on WordList:FlatTranslate
rebuild index IX_Word on WordList:word
rebuild index IX_Word_Id on WordList:word
rebuild index IX_Synonym_SourceWord on WordList:synonym
rebuild index IX_Synonym_TargetWordId on WordList:synonym
*/

/*
ANALYZE INDEX IX_TopNotchERP_Address_ParentKey ON TopNotchERP:Address
ANALYZE index IX_Product on AdventureWorks:Production:Product
ANALYZE index IX_Name on AdventureWorks:Production:Product
ANALYZE index IX_FlatTranslate_English on WordList:FlatTranslate
ANALYZE index IX_Word on WordList:word
ANALYZE index IX_Word_Id on WordList:word
ANALYZE index IX_Synonym_SourceWord on WordList:synonym
ANALYZE index IX_TopNotchERP_State on TopNotchERP:Address
ANALYZE index IX_TopNotchERP_Zip on TopNotchERP:Address
ANALYZE index IX_TopNotchERP_Inventory_InvtId on TopNotchERP:Inventory
ANALYZE index IX_TopNotchERP_Inventory_Descr on TopNotchERP:Inventory
ANALYZE index IX_TopNotchERP_Inventory_ClassId on TopNotchERP:Inventory
ANALYZE index IX_TopNotchERP_Inventory_Comm on TopNotchERP:Inventory
ANALYZE index IX_TopNotchERP_Inventory_LotFlag on TopNotchERP:Inventory
*/

/*
SAMPLE TopNotchERP:Address 100

CREATE INDEX IX_TopNotchERP_Address_ParentKey
(
	Parent_Key
) ON TopNotchERP:Address

*/

/*
set TraceWaitTimes true
set MinQueryThreads 1
set MaxQueryThreads 10
set QueryThreadWeight 2.0

exec ClearCache
exec ReleaseCacheAllocations
exec ShowCachePartitions
exec ShowHealthCounters
exec ClearHealthCounters
exec CheckpointHealthCounters
exec ShowBlocks(5)
exec ShowTransactions
exec ShowWaitingLocks

EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
*/

/*
set TraceWaitTimes false
EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
*/
/*
select
	IIF(Equals(tw.Text, 'Luna'), 'YES!', tw.Text) as 'Is Luna 2',

	IIF(Equals(tw.Text, 'Luna'), 'YES!', '') as 'Is Luna?',
	
	DateTimeUTC(),
	DateTimeUTC('hh-mm-ss'),
	
	Guid(),
	
	DocumentUID('tw'),
	DocumentPage('tw'),
	DocumentID('tw'),

	tw.Id + sw.Id + 10 as gg,
	tw.Id,
	sw.Id,
	10 + tw.Id as gg,
	Substring(sw.Text, 1, Length(sw.Text) - 1) as Length,
	ToProper(concat(sw.Text, '->' ,tw.Text)) as Translation,
	11+22*6 /3.5 as MAth,
	Left('Hello World', 4),
	Right('Hello World', 4),
	IndexOf('l', 'Hello World'),
	LastIndexOf('l', 'Hello World'),
	Checksum(tw.Text.Name) as g,
	Sha1(tw.Text.Name) as g,
	Sha256(tw.Text.Name) as g,
	10*10/2.6 as Ex,
	SubString(tl.name, 2, Length(tl.name) - 3) as s,
	
	SubString(tl.Name, 0, Length(tl.Name) - 3),
	
	1 + Length(tl.Name) as g,
	Length(tl.Name) + 1 as g,
	
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	--S.TargetWordId,
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
from
	WordList:Word as sw
inner join WordList:Synonym as s
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = tw.LanguageId
inner join WordList:Language as sl
	ON sl.Id = sw.LanguageId
where
	sw.Text = 'moon'
--order by
	--sw.Text
	--'Is Luna?' DESC
*/
/*
CREATE PROCEDURE UpdateProductByColorAndGetItsName
(
	@ProductColor as string
) ON AdventureWorks:Production:Product AS
(
	UPDATE
		AdventureWorks:Production:Product
	SET
		Name = Guid()
	WHERE
		Color = @ProductColor;
	
	SELECT
		*
	INTO
		#TempTable
	from
		AdventureWorks:Production:Product
	WHERE
		Color = @ProductColor;
		
	SELECT * FROM #TempTable;
)
GO

EXEC AdventureWorks:Production:Product:UpdateProductByColorAndGetItsName('Test-Color')
GO
*/
/*
UPDATE
	AdventureWorks:Production:Product
SET
	Name = Guid()
	--Color = 'Test-Color'
WHERE
	Color = 'Test-Color';

select * from 	AdventureWorks:Production:Product
WHERE
	Color = 'Test-Color';
*/
/*
begin transaction;

select
	Count(SourceWordId) as Count,
	Sum(SourceWordId) as Sum,
	Min(SourceWordId) as Min,
	Max(SourceWordId) as Max,
	Avg(SourceWordId) as Avg
INTO
	#WordList:Stats
from
	WordList:Synonym 
where
	SourceWordId Between 800000 and 800010;
	
SELECT * FROM #WordList:Stats;

--drop schema #WordList:Stats;

commit transaction;
*/

/*
select top 10
	SourceWordId,
	Min(TargetWordId) as Min,
	Max(TargetWordId) as Max,
	Sum(TargetWordId) as Sum,
	Avg(TargetWordId) as Avg,
	Count(TargetWordId) as Count
from
	WordList:Synonym 
group by
	SourceWordId
*/
--order by
	--SourceWord

/*
select
	--Count(),
	Min(s.TargetWordId) as Min,
	Max(s.TargetWordId) as Max,
	Sum(s.TargetWordId) as Sum,
	Avg(s.TargetWordId) as Avg,
	Count(s.TargetWordId) as Count,
	--sw.Text as SourceWord,
	--S.TargetWordId,
	sw.Text as SourceWord,
	tw.Text as TargetWord
	--tl.Name as TargetLanguage
from
	WordList:Word as sw
inner join WordList:Synonym as s
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = tw.LanguageId
where
	sw.Text = 'moon'
group by
	sw.Text,
	tw.Text
--order by
	--SourceWord
*/

/*
select
	sw.*
--into
--	WordList:MoonWords
from
	WordList:Word as sw
inner join WordList:Synonym as s
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = tw.LanguageId
where
	sw.Text like 'moon%'
*/
/*
set TraceWaitTimes true;
set MinQueryThreads 1;
set MaxQueryThreads 10;
set QueryThreadWeight 2.0;

exec ClearCache;
exec ReleaseCacheAllocations;
exec ShowCachePartitions;
exec ShowHealthCounters;
exec ClearHealthCounters;
exec CheckpointHealthCounters;
exec ShowBlocks(5)
exec ShowTransactions;
exec ShowWaitingLocks
*/


--select DateTimeUTC('aaa', 'bbb', 'ccc') from Test

/*
create schema Test;

insert into Test
(Name = '1-1', Num1 = 1, Num2 = 5),
(Name = '1-2', Num1 = 1, Num2 = 5),
(Name = '1-3', Num1 = 1, Num2 = 5),
(Name = '2-1', Num1 = 2, Num2 = 4),
(Name = '2-2', Num1 = 2, Num2 = 4),
(Name = '2-3', Num1 = 2, Num2 = 4),
(Name = '5-3', Num1 = 5, Num2 = 1, IsVIP = 1);
(Name = '3-1', Num1 = 3, Num2 = 3),
(Name = '3-2', Num1 = 3, Num2 = 3),
(Name = '3-3', Num1 = 3, Num2 = 3),
(Name = '4-1', Num1 = 4, Num2 = 2),
(Name = '4-2', Num1 = 4, Num2 = 2),
(Name = '4-3', Num1 = 4, Num2 = 2),
(Name = '5-1', Num1 = 5, Num2 = 1),
(Name = '5-2', Num1 = 5, Num2 = 1),
(Name = '5-3', Num1 = 5, Num2 = 1),
(Name = '5-3', Num1 = 5, Num2 = 1, IsVIP = 2);

select * from Test where isvip = null
*/

/*
SELECT
	x,
	IIF(Equals(sw.Text, 'moonwort'), '---!!YES!!---',
		Concat('Nope, its just [', tw.Text, ']...'))
FROM
	WordList:Word as sw
inner join WordList:Word as tw
	on tw.Id = sw.Id
WHERE
	sw.Text like 'moon%'
*/
/*
SELECT
	IIF(Equals(sw.Text, 'moonwort'), '---!!YES!!---',
		Concat('Nope, its just [', tw.Text, ']...')) as 'Is Moonwart'
FROM
	WordList:Word as sw
inner join WordList:Word as tw
	on tw.Id = sw.Id
WHERE
	sw.Text like 'moon%'
ORDER BY
	'Is Moonwart'
*/

/*
SELECT
	Text
FROM
	WordList:Word as sw
WHERE
	sw.Text like 'moon%';
*/
/*
select
	IIF(Equals(tw.Text, 'Luna'), 'YES!', tw.Text) as 'Is Luna 2',

	IIF(Equals(tw.Text, 'Luna'), 'YES!', '') as 'Is Luna?',
	
	DateTimeUTC(),
	DateTimeUTC('hh-mm-ss'),
	
	Guid(),
	
	DocumentUID('tw'),
	DocumentPage('tw'),
	DocumentID('tw'),

	tw.Id + sw.Id + 10 as gg,
	tw.Id,
	sw.Id,
	10 + tw.Id as gg,
	Substring(sw.Text, 1, Length(sw.Text) - 1) as Length,
	ToProper(concat(sw.Text, '->' ,tw.Text)) as Translation,
	11+22*6 /3.5 as MAth,
	Left('Hello World', 4),
	Right('Hello World', 4),
	IndexOf('l', 'Hello World'),
	LastIndexOf('l', 'Hello World'),
	Checksum(tw.Text.Name) as g,
	Sha1(tw.Text.Name) as g,
	Sha256(tw.Text.Name) as g,
	10*10/2.6 as Ex,
	SubString(tl.name, 2, Length(tl.name) - 3) as s,
	
	SubString(tl.Name, 0, Length(tl.Name) - 3),
	
	1 + Length(tl.Name) as g,
	Length(tl.Name) + 1 as g,
	
	sw.Text as SourceWord,
	sl.Name as SourceLanguage,
	--S.TargetWordId,
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
	
from
	WordList:Word as sw
inner join WordList:Synonym as s
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = tw.LanguageId
inner join WordList:Language as sl
	ON sl.Id = sw.LanguageId
where
	sw.Text = 'moon'
order by
	--sw.Text
	'Is Luna?' DESC
*/

/*
select
	sw.Text as SourceWord,
	S.TargetWordId,
	tw.Text as TargetWord,
	tl.Name as TargetLanguage
from
	WordList:Word as sw
inner join WordList:Synonym as s
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
inner join WordList:Language as tl
	on tl.Id = tw.LanguageId
where
	sw.Text like 'moon%'
*/

/*
--You'll have to cancel this badboy, figure out indexing.
select
	sw.Text as SourceWord,
	S.TargetWordId,
	tw.Text as TargetWord
from
	WordList:Synonym as s
inner join WordList:Word as sw
	on s.SourceWordId = sw.Id
inner join WordList:Word as tw
	ON tw.Id = S.TargetWordId
where
	sw.Text = 'moon'
*/	

--select * from WordList:Synonym where SourceWordId = 583273


/*
DROP INDEX IX_FlatTranslate_English ON WordList:FlatTranslate

CREATE UniqueKey IX_Word_Id
(
	Id
) ON WordList:Word
*/

--select * from WordList:Synonym where SourceWordId = 583273


/*
select * from WordList:FlatTranslate
where English like 'apple%'


CREATE INDEX IX_FlatTranslate_English
(
	English
) ON WordList:FlatTranslate


delete from
AdventureWorks:Production:Product
where ProductId > 9999

select * from
AdventureWorks:Production:Product
where ProductId < 9999



select * from Test2 where Num1 >= 2

select * from Test2
Where Num1 > 1 and Num1 < 3
order by name, num1, num2



create schema Test;



insert into Test2
(Name = '1-1', Num1 = 1, Num2 = 5),
(Name = '1-2', Num1 = 1, Num2 = 5),
(Name = '1-3', Num1 = 1, Num2 = 5),
(Name = '2-1', Num1 = 2, Num2 = 4),
(Name = '2-2', Num1 = 2, Num2 = 4),
(Name = '2-3', Num1 = 2, Num2 = 4),
(Name = '3-1', Num1 = 3, Num2 = 3),
(Name = '3-2', Num1 = 3, Num2 = 3),
(Name = '3-3', Num1 = 3, Num2 = 3),
(Name = '4-1', Num1 = 4, Num2 = 2),
(Name = '4-2', Num1 = 4, Num2 = 2),
(Name = '4-3', Num1 = 4, Num2 = 2),
(Name = '5-1', Num1 = 5, Num2 = 1),
(Name = '5-2', Num1 = 5, Num2 = 1),
(Name = '5-3', Num1 = 5, Num2 = 1);

CREATE INDEX Test2_Num1_Num2 (Num1, Num2) on Test2;



--SET TraceWaitTimes on;

insert into AdventureWorks:Production:Product
(ProductId = '10000', Name = 'API Test Product 1'),
(ProductId = '10002', Name = 'API Test Product 2'),
(ProductId = '10003', Name = 'API Test Product 3'),
(ProductId = '10004', Name = 'API Test Product 4'),
(ProductId = '10005', Name = 'API Test Product 5');

--select * from AdventureWorks:Production:Product where ProductId > 9999
--delete from AdventureWorks:Production:Product where ProductId > 9999

select
	*
from
	AdventureWorks:Production:Product
where
	ProductId = 10005



--rebuild index IX_Product_Name on AdventureWorks:Production:Product


--INSERT INTO AdventureWorks:dbo:AWBuildVersion(SystemInformationID = 'API Test Product');
--select * from AdventureWorks:dbo:AWBuildVersion where SystemInformationID = 'API Test Product';
--delete from AdventureWorks:dbo:AWBuildVersion where SystemInformationID = 'API Test Product';


DELETE th FROM
	AdventureWorks:Production:Product as p
INNER JOIN AdventureWorks:Production:TransactionHistory as th
	ON p.ProductID = th.ProductID
    AND p.ListPrice = th.ActualCost
INNER JOIN AdventureWorks:Production:ProductSubcategory as PSC
	ON psc.ProductSubcategoryID = p.ProductSubcategoryID
WHERE
	PSC.Name = 'Road Bikes'
	and TH.TransactionId > 200000
	AND P.Name = 'Road-750 Black, 52'
	

delete from
	AdventureWorks:Production:Product as p
INNER JOIN AdventureWorks:Production:ProductSubcategory as PSC
	ON psc.ProductSubcategoryID = p.ProductSubcategoryID;



DELETE FROM
	AdventureWorks:Production:Product as p
INNER JOIN AdventureWorks:Production:TransactionHistory as th
	ON p.ProductID = th.ProductID
    AND p.ListPrice = th.ActualCost
INNER JOIN AdventureWorks:Production:ProductSubcategory as PSC
	ON psc.ProductSubcategoryID = p.ProductSubcategoryID
WHERE
	PSC.Name = 'Road Bikes'
	and TH.TransactionId > 200000
	AND P.Name = 'Road-750 Black, 52'
	
--delete from AdventureWorks:Production:Product as p
--where p.Name = 'Bearing Ball'


INSERT INTO AdventureWorks:Production:Product
(
	ProductId = 'Test-ProductId',
	Name = 'Test-Name',
	ProductNumber = 'Test-ProductNumber',
	Color = 'Test-Color'
)



--Possible iterations: 2,115,485,064
SELECT --Should yeild 457 records
	P.Name,
	TH.TransactionId,
	P.ProductNumber,
	PSC.Name as Category
FROM
	AdventureWorks:Production:Product as p
INNER JOIN AdventureWorks:Production:TransactionHistory as th
	ON p.ProductID = th.ProductID
    AND p.ListPrice = th.ActualCost
INNER JOIN AdventureWorks:Production:ProductSubcategory as PSC
	ON psc.ProductSubcategoryID = p.ProductSubcategoryID
WHERE
	PSC.Name = 'Road Bikes'
	and TH.TransactionId > 200000
	AND P.Name = 'Road-750 Black, 52'
ORDER BY
	P.ProductNumber asc,
	TH.TransactionId desc




select * from AdventureWorks:Production:TransactionHistory as TH
WHERE TH.ProductID = 820



drop index IX_TransactionHistory_ProductID_ActualCost
on AdventureWorks:Production:TransactionHistory

CREATE INDEX IX_Product_ProductId_Name
(
	ProductId,
	Name
) ON AdventureWorks:Production:Product
CREATE INDEX IX_Product_Name
(
	Name
) ON AdventureWorks:Production:Product
CREATE INDEX IX_TransactionHistory_ProductID_ActualCost
(
	ProductID,
	ActualCost
) ON AdventureWorks:Production:TransactionHistory
CREATE UNIQUEKEY IX_ProductSubcategory_ProductSubcategoryID
(
	ProductSubcategoryID
) ON AdventureWorks:Production:ProductSubcategory
CREATE UNIQUEKEY IX_TransactionHistory_TransactionId
(
	TransactionId
) ON AdventureWorks:Production:TransactionHistory

REBUILD INDEX IX_Product_ProductId_Name ON AdventureWorks:Production:Product;
REBUILD INDEX IX_Product_Name ON AdventureWorks:Production:Product;
REBUILD INDEX IX_TransactionHistory_ProductID_ActualCost ON AdventureWorks:Production:TransactionHistory;
REBUILD UNIQUEKEY IX_ProductSubcategory_ProductSubcategoryID ON AdventureWorks:Production:ProductSubcategory;
REBUILD UNIQUEKEY IX_TransactionHistory_TransactionId ON AdventureWorks:Production:TransactionHistory





--SET TraceWaitTimes ON;

SELECT TOP 5
	P.Name,
	TH.TransactionId,
	P.ProductNumber,
	PSC.Name as Category
FROM
	AdventureWorks:Production:Product as p
INNER JOIN AdventureWorks:Production:TransactionHistory as th
	ON p.ProductID = th.ProductID
    AND p.ListPrice = th.ActualCost
INNER JOIN AdventureWorks:Production:ProductSubcategory as PSC
	ON psc.ProductSubcategoryID = p.ProductSubcategoryID
WHERE
	PSC.Name = 'Road Bikes'
	and TH.TransactionId > 200000
ORDER BY
	P.ProductNumber asc,
	TH.TransactionId desc
*/